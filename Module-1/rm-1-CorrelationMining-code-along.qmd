---
title: "Module 6: Correlation Mining"
subtitle: "Code Along"
format:
  revealjs: 
    slide-number: c/t
    progress: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/LASERLogoB.png
    theme: [default, css/laser.scss]
    width: 1920
    height: 1080
    margin: 0.05
    footer: <a href=https://www.go.ncsu.edu/laser-institute>go.ncsu.edu/laser-institute
resources:
  - demo.pdf
bibliography: lit/references.bib
editor: visual
csl: apa/apa-6th-edition.csl
title-slide-attributes: 
  data-notes: Today we are going to discuss memory algorithms.
---

## **Correlation Mining**

-   Correlation mining is used to identify relationships between variables in a dataset.

-   **Example:** Finding how house size, location, and other factors relate to house prices.

## Dataset

**Dataset Used:** California Housing Dataset from Scikit-Learn

::: panel-tabset
## Import

We will use the California Housing dataset from sklearn

``` python
from sklearn.datasets import fetch_california_housing 
data = fetch_california_housing()
```

## Load

Covert the data to DataFrame

``` python
import pandas as pd 
df = pd.DataFrame(data.data, columns=data.feature_names)
df['House_Price'] = data.target
```

## Correlation Matrix

Conduct Correlation Analysis

``` python
correlation_matrix = df.corr().round(4)
print(correlation_matrix)
```
:::

## P-Values

P-values show the statistical significance of correlation.

``` python
# P-value Calculation for Correlation Significance
def correlation_p_values(df):
    p_values = pd.DataFrame(index=df.columns, columns=df.columns)
    for col1 in df.columns:
        for col2 in df.columns:
            if col1 == col2:
                p_values.loc[col1, col2] = "0.0000"
            else:
                _, p_value = pearsonr(df[col1], df[col2])
                p_values.loc[col1, col2] = f"{p_value:.4e}"  # Scientific notation for small values
    return p_values

p_values = correlation_p_values(df)
print("\nP-values for Correlation Significance:\n", p_values)
```

## Interpretation

| **P-Value**   | **Interpretation**                                               |
|---------------|------------------------------------------------------------------|
| **p \> 0.05** | No strong evidence against the null hypothesis (Not significant) |
| **p ≤ 0.05**  | Moderate evidence against the null hypothesis (Significant)      |

Null hypothesis

| **Scenario**       | **Null Hypothesis (H₀)**                                     | **Alternative Hypothesis (H₁)**                 |
|--------------------|--------------------------------------------------------------|-------------------------------------------------|
| **Drug Testing**   | The new drug has **no effect** on blood pressure.            | The new drug **lowers** blood pressure.         |
| **Housing Market** | There is **no correlation** between income and house prices. | Higher income **leads to higher house prices**. |

## Visualization

Visualization helps you demonstrate correlation in a straightforward way.

``` python
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, fmt=".4f", cmap='coolwarm', center=0)
plt.title('Correlation Matrix Heatmap')
plt.show()
```

## Bonferroni Correction

The goal is to keep the probability of making one or more false discoveries across all tests below a predefined threshold (typically 0.05).

``` python
import numpy as np

def bonferroni_correction(p_values, alpha=0.05):
    n = len(p_values)
    
    # Calculate the Bonferroni-adjusted alpha
    bonferroni_alpha = alpha / n

    # Initialize an array to store the results
    result = np.zeros((n, 3), dtype=object)

    # Apply the Bonferroni correction
    for i, pval in enumerate(p_values):
        result[i, 0] = pval  # Original p-values
        result[i, 1] = bonferroni_alpha  # Bonferroni-adjusted alpha
        
        # Mark significance
        significance = 'Significant' if pval <= bonferroni_alpha else 'Not Significant'
        result[i, 2] = significance

    return result
result = bonferroni_correction(p_values)
print("P-value | Alpha | Significance")
for row in result:
    print(f"{row[0]:.5f} | {row[1]:.5f} | {row[2]}")
```
